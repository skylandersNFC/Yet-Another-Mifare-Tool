using System;
using System.Collections.Generic;

namespace YetAnotherMifareTool.Utils
{
    internal class Precalc
    {
        private static List<byte[]> shifts = new List<byte[]>()
        {
            new byte[] { 0x4, 0x5, 0x7, 0x6, 0x3, 0x2, 0x0, 0x1, 0xB, 0xA, 0x8, 0x9, 0xC, 0xD, 0xF, 0xE },
            new byte[] { 0x4, 0xB, 0xB, 0x4, 0xB, 0x4, 0x4, 0xB, 0xA, 0x5, 0x5, 0xA, 0x5, 0xA, 0xA, 0x5 },
            new byte[] { 0xB, 0x6, 0x0, 0xD, 0xD, 0x0, 0x6, 0xB, 0x6, 0xB, 0xD, 0x0, 0x0, 0xD, 0xB, 0x6 },
            new byte[] { 0xE, 0x5, 0x9, 0x2, 0x0, 0xB, 0x7, 0xC, 0x3, 0x8, 0x4, 0xF, 0xD, 0x6, 0xA, 0x1 },
            new byte[] { 0x4, 0xE, 0x1, 0xB, 0xF, 0x5, 0xA, 0x0, 0x3, 0x9, 0x6, 0xC, 0x8, 0x2, 0xD, 0x7 },
            new byte[] { 0xA, 0x4, 0x7, 0x9, 0x0, 0xE, 0xD, 0x3, 0xE, 0x0, 0x3, 0xD, 0x4, 0xA, 0x9, 0x7 },
            new byte[] { 0xE, 0x6, 0xE, 0x6, 0xF, 0x7, 0xF, 0x7, 0xD, 0x5, 0xD, 0x5, 0xC, 0x4, 0xC, 0x4 },
            new byte[] { 0x7, 0x1, 0xB, 0xD, 0xE, 0x8, 0x2, 0x4, 0x4, 0x2, 0x8, 0xE, 0xD, 0xB, 0x1, 0x7 },
            new byte[] { 0xD, 0xB, 0x0, 0x6, 0x6, 0x0, 0xB, 0xD, 0xA, 0xC, 0x7, 0x1, 0x1, 0x7, 0xC, 0xA },
            new byte[] { 0xe, 0x1, 0x1, 0xe, 0x1, 0xe, 0xe, 0x1, 0x1, 0xe, 0xe, 0x1, 0xe, 0x1, 0x1, 0xe },
        };

        private static byte ApplyPermutationAndShifts(int pos, int value, int nibble)
        {
            byte[] shiftbytes = shifts[pos - 1];
            byte shiftElem = shiftbytes[nibble];
            byte shiftOne = shiftbytes[0];
            int rs = (value ^ (shiftOne ^ shiftElem));
            return (byte)rs;
        }

        internal static byte[] GetOne(byte[] uid, int block)
        {
            string s = BitConverter.ToString(uid, 0, 4).Replace("-", "").ToUpper()
                + block.ToString("X2");

            int nibble1 = Convert.ToInt32(s.Substring(0, 1), 16);

            string permuted = string.Empty;
            for (int i = 0; i < s.Length; i++)
            {
                byte[] el_row = shifts[i];
                byte el_value = el_row[nibble1];

                int j = 0;
                while (j <= i)
                {
                    if (i - j > 0)
                    {
                        int nibble = Convert.ToInt32(s.Substring(j + 1, 1), 16);
                        el_value = ApplyPermutationAndShifts(i - j, el_value, nibble);
                    }
                    j++;
                }
                permuted += el_value.ToString("X");
            }
            permuted = "C2" + permuted;
            return ToBytes(permuted);
        }

        private static byte[] ToBytes(string hex)
        {
            byte[] bytes = new byte[hex.Length / 2];
            for (int i = 0; i < bytes.Length; i++)
                bytes[i] = Convert.ToByte(hex.Substring(i * 2, 2), 16);
            return bytes;
        }
    }
}
